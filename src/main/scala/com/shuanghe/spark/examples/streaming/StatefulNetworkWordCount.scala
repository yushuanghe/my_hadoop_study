package com.shuanghe.spark.examples.streaming

import org.apache.log4j.{Level, Logger}
import org.apache.spark.sql.SparkSession
import org.apache.spark.streaming.{Seconds, State, StateSpec, StreamingContext}

/**
  * key的每一次变化
  */
object StatefulNetworkWordCount {
    def main(args: Array[String]) {
        if (args.length < 2) {
            System.err.println("Usage: StatefulNetworkWordCount <hostname> <port>")
            System.exit(1)
        }

        Logger.getRootLogger.setLevel(Level.INFO)

        val spark = SparkSession.builder()
                .appName("StatefulNetworkWordCount")
                .master("local")
                .getOrCreate()

        //        val sparkConf = new SparkConf().setAppName("StatefulNetworkWordCount")
        // Create the context with a 1 second batch size
        val ssc = new StreamingContext(spark.sparkContext, Seconds(5))

        ssc.checkpoint(".")

        // Initial state RDD for mapWithState operation
        val initialRDD = ssc.sparkContext.parallelize(List(("hello", 1), ("world", 1)))

        // Create a ReceiverInputDStream on target ip:port and count the
        // words in input stream of \n delimited test (eg. generated by 'nc')
        val lines = ssc.socketTextStream(args(0), args(1).toInt)

        val words = lines.flatMap(_.split(" "))
        val wordDstream = words.map(x => (x, 1))

        // Update the cumulative count using mapWithState
        // This will give a DStream made of state (which is the cumulative count of the words)
        // TODO: mapWithState传入的函数
        val mappingFunc = (word: String, one: Option[Int], state: State[Int]) => {
            val sum = one.getOrElse(0) + state.getOption.getOrElse(0)
            val output = (word, sum)

            state.update(sum)
            output
        }

        val stateDstream = wordDstream.mapWithState(
            StateSpec.function(mappingFunc).initialState(initialRDD))
        stateDstream.print()
        ssc.start()
        ssc.awaitTermination()
    }
}
